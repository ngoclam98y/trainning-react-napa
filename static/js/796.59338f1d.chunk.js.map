{"version":3,"file":"static/js/796.59338f1d.chunk.js","mappings":"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","sources":["../node_modules/@ant-design/icons-svg/es/asn/SmileOutlined.js","../node_modules/@ant-design/icons/es/icons/SmileOutlined.js","pages/User/index.js"],"sourcesContent":["// This icon file is generated automatically.\nvar SmileOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M288 421a48 48 0 1096 0 48 48 0 10-96 0zm352 0a48 48 0 1096 0 48 48 0 10-96 0zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm263 711c-34.2 34.2-74 61-118.3 79.8C611 874.2 562.3 884 512 884c-50.3 0-99-9.8-144.8-29.2A370.4 370.4 0 01248.9 775c-34.2-34.2-61-74-79.8-118.3C149.8 611 140 562.3 140 512s9.8-99 29.2-144.8A370.4 370.4 0 01249 248.9c34.2-34.2 74-61 118.3-79.8C413 149.8 461.7 140 512 140c50.3 0 99 9.8 144.8 29.2A370.4 370.4 0 01775.1 249c34.2 34.2 61 74 79.8 118.3C874.2 413 884 461.7 884 512s-9.8 99-29.2 144.8A368.89 368.89 0 01775 775zM664 533h-48.1c-4.2 0-7.8 3.2-8.1 7.4C604 589.9 562.5 629 512 629s-92.1-39.1-95.8-88.6c-.3-4.2-3.9-7.4-8.1-7.4H360a8 8 0 00-8 8.4c4.4 84.3 74.5 151.6 160 151.6s155.6-67.3 160-151.6a8 8 0 00-8-8.4z\" } }] }, \"name\": \"smile\", \"theme\": \"outlined\" };\nexport default SmileOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SmileOutlinedSvg from \"@ant-design/icons-svg/es/asn/SmileOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SmileOutlined = function SmileOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: SmileOutlinedSvg\n  }));\n};\n\nSmileOutlined.displayName = 'SmileOutlined';\nexport default /*#__PURE__*/React.forwardRef(SmileOutlined);","import { EditOutlined, SmileOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useState } from \"react\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst { Option } = Select;\r\n\r\nconst months = Array(12)\r\n  .fill(0)\r\n  .map((_, index) => index + 1);\r\nconst days = Array(31)\r\n  .fill(0)\r\n  .map((_, index) => index + 1);\r\nconst years = Array(5)\r\n  .fill(new Date().getFullYear())\r\n  .map((x, index) => x - index);\r\n\r\nconst DATA_ONE = [\r\n  {\r\n    id: 1,\r\n    title: \"名前と苗字\",\r\n    name: \"username\",\r\n    titleEdit: \"苗字とファーストネームを入力してください。\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"生年月日\",\r\n    name: \"birthday\",\r\n    titleEdit: \"生年月日を選択してください。\",\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"電子メールアドレス\",\r\n    name: \"email\",\r\n    titleEdit: \"電子メールアドレスを入力してください。\",\r\n  },\r\n];\r\n\r\nconst DATA_TWO = [\r\n  {\r\n    id: 1,\r\n    title: \"パスワード\",\r\n    name: \"password\",\r\n    titleEdit:\r\n      \"利用できる文字は8文字以上の半角英数字及び記号（「-」「_」「%」「$」「#」のみ）\",\r\n  },\r\n];\r\n\r\nexport default function () {\r\n  const [text, setText] = useState(\"\");\r\n  const [userData, setUserData] = useState({\r\n    username: \"グエンホアンサン\",\r\n    birthday: \"1996/01/01\",\r\n    email: \"example@gmail.com\",\r\n    password: \"••••••••••\",\r\n  });\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const handleNameEdit = (value) => {\r\n    setText(value);\r\n    form.resetFields();\r\n  };\r\n\r\n  const setUserDataFollowField = (fields, values) => {\r\n    if (fields.includes(\"firstName\") && fields.includes(\"lastName\")) {\r\n      setUserData({\r\n        ...userData,\r\n        username: `${values.firstName} ${values.lastName}`,\r\n      });\r\n      return handleNameEdit(\"\");\r\n    }\r\n    if (\r\n      fields.includes(\"year\") &&\r\n      fields.includes(\"day\") &&\r\n      fields.includes(\"month\")\r\n    ) {\r\n      setUserData({\r\n        ...userData,\r\n        birthday: `${values.year}/${values.month}/${values.day}`,\r\n      });\r\n      return handleNameEdit(\"\");\r\n    }\r\n    if (fields.includes(\"email\")) {\r\n      setUserData({\r\n        ...userData,\r\n        email: `${values.email}`,\r\n      });\r\n      return handleNameEdit(\"\");\r\n    }\r\n    if (\r\n      fields.includes(\"newPass\") &&\r\n      fields.includes(\"oldPass\") &&\r\n      fields.includes(\"confirmPass\")\r\n    ) {\r\n      if (values.newPass === values.confirmPass) {\r\n        setUserData({\r\n          ...userData,\r\n          password: Array(values.newPass.length)\r\n            .fill(\"*\")\r\n            .toString()\r\n            .replaceAll(\",\", \"\"),\r\n        });\r\n        return handleNameEdit(\"\");\r\n      }\r\n      return message.error(\"confirm password not match!\");\r\n    }\r\n  };\r\n\r\n  const renderButtonSubmit = ({ values, resetFields, fields, errors }) => {\r\n    return (\r\n      <Form.Item wrapperCol={{ span: 23 }}>\r\n        <Row>\r\n          <Col xs={5} xl={2} offset={4}>\r\n            <Button\r\n              htmlType=\"submit\"\r\n              type=\"text\"\r\n              danger\r\n              onClick={() => {\r\n                resetFields(fields);\r\n                handleNameEdit(\"\");\r\n                return;\r\n              }}\r\n            >\r\n              キャンセル\r\n            </Button>\r\n          </Col>\r\n          <Col xs={5} xl={4}>\r\n            <Button\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"#fa8c16\",\r\n                width: \"100px\",\r\n                borderColor: \"#fa8c16\",\r\n                borderRadius: \"5px\",\r\n                color: \"#ffffff\",\r\n              }}\r\n              onClick={() => {\r\n                if (errors && errors.length && errors[0].length) {\r\n                  return;\r\n                }\r\n                if (\r\n                  Object.values(values).every((x) => x !== undefined) &&\r\n                  Object.values(values).length === fields.length\r\n                ) {\r\n                  setUserDataFollowField(fields, values);\r\n                  return;\r\n                }\r\n                message.error(\"please input your all field\");\r\n                return;\r\n              }}\r\n            >\r\n              保存\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form.Item>\r\n    );\r\n  };\r\n\r\n  const renderEditContent = (name) => {\r\n    if (text === \"username\" && name === text) {\r\n      return (\r\n        <Form\r\n          style={{ marginTop: \"20px\" }}\r\n          name=\"basic\"\r\n          labelCol={{ span: 1, offset: 1 }}\r\n          wrapperCol={{ span: 3, offset: 2 }}\r\n          autoComplete=\"off\"\r\n          initialValues={{ firstName: \"\", lastName: \"\" }}\r\n        >\r\n          {(values, formInstance) => {\r\n            const { firstName, lastName } = values;\r\n            const { resetFields } = formInstance;\r\n            return (\r\n              <>\r\n                <Form.Item label=\"苗字\" name=\"firstName\">\r\n                  <Input type=\"text\" value={values.firstName} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"ファーストネーム\" name=\"lastName\">\r\n                  <Input type=\"text\" value={values.lastName} />\r\n                </Form.Item>\r\n                {renderButtonSubmit({\r\n                  values: { firstName, lastName },\r\n                  resetFields,\r\n                  fields: [\"firstName\", \"lastName\"],\r\n                })}\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      );\r\n    }\r\n    if (text === \"birthday\" && name === text) {\r\n      return (\r\n        <Form\r\n          style={{ marginTop: \"20px\" }}\r\n          name=\"basic\"\r\n          labelCol={{ span: 1, offset: 8 }}\r\n          wrapperCol={{ span: 5, offset: 4 }}\r\n          autoComplete=\"off\"\r\n          form={form}\r\n          initialValues={{ year: \"\", month: \"\", day: \"\" }}\r\n        >\r\n          {(values, formInstance) => {\r\n            const { year, month, day } = values;\r\n            const { resetFields } = formInstance;\r\n            return (\r\n              <>\r\n                <Row>\r\n                  <Col offset={3} xs={10} xl={4}>\r\n                    <Space size=\"small\">\r\n                      <Form.Item name=\"year\">\r\n                        <Select\r\n                          style={{ width: 80 }}\r\n                          name=\"year\"\r\n                          value={values.year}\r\n                        >\r\n                          {years.map((x) => (\r\n                            <Option value={x} key={x}>\r\n                              {x}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </Form.Item>\r\n\r\n                      <Form.Item name=\"month\">\r\n                        <Select\r\n                          style={{ width: 80 }}\r\n                          name=\"month\"\r\n                          value={values.month}\r\n                        >\r\n                          {months.map((x) => (\r\n                            <Option value={x} key={x}>\r\n                              {x}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </Form.Item>\r\n\r\n                      <Form.Item name=\"day\">\r\n                        <Select\r\n                          style={{ width: 80 }}\r\n                          name=\"day\"\r\n                          value={values.day}\r\n                        >\r\n                          {days.map((x) => (\r\n                            <Option value={x} key={x}>\r\n                              {x}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Space>\r\n                  </Col>\r\n                </Row>\r\n\r\n                {renderButtonSubmit({\r\n                  values: {\r\n                    year,\r\n                    month,\r\n                    day,\r\n                  },\r\n                  resetFields,\r\n                  fields: [\"year\", \"month\", \"day\"],\r\n                })}\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      );\r\n    }\r\n    if (text === \"email\" && name === text) {\r\n      return (\r\n        <Form\r\n          style={{ marginTop: \"20px\" }}\r\n          name=\"basic\"\r\n          labelCol={{ span: 1, offset: 8 }}\r\n          wrapperCol={{ span: 5, offset: 4 }}\r\n          autoComplete=\"off\"\r\n          form={form}\r\n          initialValues={{ email: \"\" }}\r\n        >\r\n          {(values, formInstance) => {\r\n            const { email } = values;\r\n            const { getFieldError, resetFields } = formInstance;\r\n            return (\r\n              <>\r\n                <Form.Item\r\n                  name=\"email\"\r\n                  rules={[\r\n                    {\r\n                      type: \"email\",\r\n                      message: \" the input is not valid E-mail\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Space align=\"center\">\r\n                    <Input type=\"text\" value={values.email} />\r\n                    {values.email && !getFieldError(\"email\").length && (\r\n                      <Space\r\n                        align=\"center\"\r\n                        style={{ width: \"160px\", color: \"#45D313\" }}\r\n                      >\r\n                        <SmileOutlined /> 有効なメール\r\n                      </Space>\r\n                    )}\r\n                  </Space>\r\n                </Form.Item>\r\n\r\n                {renderButtonSubmit({\r\n                  values: { email },\r\n                  resetFields,\r\n                  fields: [\"email\"],\r\n                  errors: getFieldError(\"email\"),\r\n                })}\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      );\r\n    }\r\n\r\n    if (text === \"password\" && name === text)\r\n      return (\r\n        <Form\r\n          style={{ marginTop: \"20px\" }}\r\n          name=\"basic\"\r\n          labelCol={{ span: 1, offset: 1 }}\r\n          wrapperCol={{ span: 3, offset: 2 }}\r\n          autoComplete=\"off\"\r\n          initialValues={{ newPass: \"\", oldPass: \"\", confirmPass: \"\" }}\r\n        >\r\n          {(values, formInstance) => {\r\n            const { newPass, oldPass, confirmPass } = values;\r\n            const { resetFields } = formInstance;\r\n            return (\r\n              <>\r\n                <Form.Item label=\"現在のパスワード\" name=\"oldPass\">\r\n                  <Input type=\"password\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"新しいパスワード\" name=\"newPass\" hasFeedback>\r\n                  <Input type=\"password\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label=\"新しいパスワードを確認\"\r\n                  name=\"confirmPass\"\r\n                  dependencies={[\"newPass\"]}\r\n                  rules={[\r\n                    ({ getFieldValue }) => ({\r\n                      validator(_, value) {\r\n                        if (!value || getFieldValue(\"newPass\") === value) {\r\n                          return Promise.resolve();\r\n                        }\r\n                        return Promise.reject(\r\n                          new Error(\r\n                            \"The two passwords that you entered do not match!\"\r\n                          )\r\n                        );\r\n                      },\r\n                    }),\r\n                  ]}\r\n                  hasFeedback\r\n                >\r\n                  <Input type=\"password\" />\r\n                </Form.Item>\r\n\r\n                {renderButtonSubmit({\r\n                  values: { newPass, oldPass, confirmPass },\r\n                  resetFields,\r\n                  fields: [\"oldPass\", \"newPass\", \"confirmPass\"],\r\n                })}\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      );\r\n  };\r\n\r\n  const renderEditIcon = (name) => {\r\n    if (!text && name !== text)\r\n      return (\r\n        <>\r\n          <EditOutlined\r\n            key=\"edit\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => handleNameEdit(name)}\r\n          />\r\n          <span style={{ paddingLeft: \"10px\" }}>編集</span>\r\n        </>\r\n      );\r\n    if (text && name !== text) {\r\n      return (\r\n        <>\r\n          <EditOutlined\r\n            key=\"edit\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => handleNameEdit(name)}\r\n          />\r\n          <span style={{ paddingLeft: \"10px\" }}>編集</span>\r\n        </>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderContentEdit = (obj) => {\r\n    if (!text && obj.name !== text) return <span>{userData[obj.name]}</span>;\r\n    if (text && obj.name !== text) {\r\n      return <span>{userData[obj.name]}</span>;\r\n    }\r\n    return <span style={{ color: \"gray\" }}>{obj.titleEdit}</span>;\r\n  };\r\n\r\n  const renderDataOne = (arrays) => {\r\n    return arrays.map((v) => {\r\n      return (\r\n        <Col xs={23} xl={23} className=\"custom-font\" key={v.id}>\r\n          <Card>\r\n            <Row>\r\n              <Col xs={23} xl={4}>\r\n                <span>{v.title}</span>\r\n              </Col>\r\n              <Col xs={23} xl={16}>\r\n                {renderContentEdit(v)}\r\n              </Col>\r\n              <Col xs={23} xl={4} className=\"custom-font-color\">\r\n                {renderEditIcon(v.name)}\r\n              </Col>\r\n            </Row>\r\n            {renderEditContent(v.name)}\r\n          </Card>\r\n        </Col>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={24} xl={24}>\r\n        <h1\r\n          style={{\r\n            fontFamily: \"Noto Sans JP\",\r\n            fontStyle: \"normal\",\r\n            fontWeight: 700,\r\n            fontSize: \"24px\",\r\n            lineHeight: \"35px\",\r\n          }}\r\n        >\r\n          プロファイル\r\n        </h1>\r\n      </Col>\r\n      {renderDataOne(DATA_ONE)}\r\n      <Col xs={24} xl={24} style={{ padding: \"10px\" }}></Col>\r\n      {renderDataOne(DATA_TWO)}\r\n    </Row>\r\n  );\r\n}\r\n"],"names":["SmileOutlined","props","ref","React","AntdIcon","_objectSpread","icon","SmileOutlinedSvg","displayName","Option","Typography","Select","months","Array","fill","map","_","index","days","years","Date","getFullYear","x","DATA_ONE","id","title","name","titleEdit","DATA_TWO","useState","text","setText","username","birthday","email","password","userData","setUserData","Form","form","handleNameEdit","value","resetFields","renderButtonSubmit","values","fields","errors","wrapperCol","span","xs","xl","offset","htmlType","type","danger","onClick","style","backgroundColor","width","borderColor","borderRadius","color","length","Object","every","undefined","includes","firstName","lastName","year","month","day","newPass","confirmPass","toString","replaceAll","message","setUserDataFollowField","renderEditContent","marginTop","labelCol","autoComplete","initialValues","formInstance","label","size","getFieldError","rules","align","oldPass","hasFeedback","dependencies","getFieldValue","validator","Promise","reject","Error","resolve","renderDataOne","arrays","v","className","obj","EditOutlined","cursor","paddingLeft","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","padding"],"sourceRoot":""}